Differences between modern and old C++:

In variables definition and constants:
	Modern C++ versions changed the way to declare and initialize C++ variables:
	Example of modern C++: 
		Declare and initialize an age variable to 0: int age {};
		Declare and initialize an age variable to a value: int age {25};

	Example of old C++:
		Declare and initialize an age variable to 0: int age = 0;
		Declare and initialize an age variable to a value: int age = 25;


In Statements and Operators:
	Modern C++ versions changed the way to do conversions from one type of variable to another:
	Example of modern C++:
		static_cast<type>
		Cast an integer value to a double: average = static_cast<double>(total) / count;

	Example of old C++:
		Cast an integer value to a double: average = (double) total / count;
		
	Difference:
		Modern C++ cast it's a little bit more restrictive than the old C++. The old cast just assumes the value can be converted, but the static_cast double check if the 		value can be converted to the new type.

In Controlling Program Flow:
	In C++11 Range-based for Loop where introduced. This is useful when working with collections, i.e. arrays or vectors.
	Example of Range-based for Loop:
		for (var_tye var_name: sequence)
			statement; // can use varn_name

	Example with array values:
		int scores [] {100, 90, 97};

		for (auto score: scores)
			cout << score << endl;
	
	Example with vector values:
		vector<double> temps {87.2, 77.1, 80.0, 72.5};

		double average_temp {};
		double running_sum {};

		for (auto temp: temps)
			running_sum += temp;

		average_temp = running_sum / temps.size();

In Pointers and References:
	In C++ 11, nullptr was introduced. Why? Because all pointers need to be initialized. If you don't initialize a pointer to point to a variable or function then you
	you should initialized it to nullptr. It will initialize it to 'point nowhere', if not uninitialized pointers can contain garbage data and can 'point anywhere'. 

In Smart pointers:
	Since C++14, we can use the make_unique function. This function returns a unique pointer of the specified type, and it allows us to pass initialization values into the
	constructor for the manage object. Why? Because it's more efficient, no calls to new or delete.

	Example 1:
	std::unique_ptr<int> p1 = make_unique<int>(100);

	Example 2:
	std::unique_ptr<Account> p2 = make_unique<Account>("James", 5000);

	Example 3:
	auto p3 = make_unique<Player>("Hero", 100, 100);